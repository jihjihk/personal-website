{
	"week2": 
	{
		"week" : "week2",
		"title" : "Private Persons / Public Space",
		"subtitle" : "Software for and against the public",
		"date" : "September 11, 2017",
		"text" : "Software has fundamentally changed the way both private and public opinions are voiced. Software is not a singular, isolated technology living inside hardware but rather a microcosm of its own, thus inherently ambivalent. The role it has played in voicing individual opinions in the public opinion is especially double-sided.\nThe definition of public sphere has changed with every turn in history. As explained in “The Public Sphere: An Encyclopedia Article (1964)” the scope of what public sphere includes has slowly expanded with history. From the feudal times during which the authorities “represent their power before the people, instead of for the people”, the public sphere expanded to include the actual public opinion thanks to the rise of literary journalism. Software has further augmented what journalism achieved in intensifying public discussion. How Twitter gives individuals an equal platform to be heard, sometimes by public officials, is one example of social media as software’s use case is expanding the scope of public sphere. It is not just the end result of using software, but the “actively working with the data: reorganizing it, uncovering the connections, becoming aware of correlations” (Chun, 2004) that software truly becomes a tool of empowerment. I think that one can even argue that writing code is a creative outlet for individuals to communicate.\nSoftware, however, is also as effective in silencing voices as it is in amplifying them, depending on who is behind building the software. This paradox is like the illusion of transparency that humans see at the cost of hiding the machines. For example, surveillance programs like the Matrix and analytics tools running in between requests and responses is how centralized authorities attempt to influence and breach the public opinion using software. Another example is the polarization of software engineers demographic, especially in gender. Despite many of the first generation programmers being female and machines lacking gender values, software engineering is becoming dominantly male-dominated, just within a few decades of its invention.\nWhile other industries may also have unbalanced representation, I think an equal representation in race, gender, and other background is especially important in software engineering. Software is referred to as the “actant in the world” that “augments, supplements, mediates, and regulates our live sand opens up new possibilities—but not in a deterministic way” (Kitchen & Dodge, 2011). Software is no longer a product but also a producer in that it disciplines our interactions with and expectations from software. As discussed before, software has a tremendous power of amplifying individual voices. If this gender imbalance persists and software becomes self-fulfilling prophecy that empowers only the voices of its creators-alike, it could become a dangerous loop of restricting the public sphere to only the powerful few, like the past societies."
	},
	"week3": 
	{
		"week" : "week3",
		"title" : "The Black Box Bias",
		"subtitle" : "Letting the data decide for us",
		"date" : "September 18, 2017",
		"text" : "Machine learning is literally leaving the decision-making process to an algorithm and asking for only the results of a certain computation. This abstraction tool is becoming more accessible as it becomes even more abstracted from the machine into simple libraries like sci-kit learn, with which we can now focus more applying than devising the algorithm. \n One useful application of machine learning is Spotify's Discover Weekly, which trains on individual's weekly music taste and then gives recommendations. The decision-making is relatively simple in this case; we can safely assume that the frequency of listening to a song is highly correlated with our liking for the music, although one week of abnormal listening behavior is likely to very easily throw off the recommendations. It's a relatively simple black box that does what we expect it to that trains on very relevant dataset--individual's playlist. \n Can the same black box be used to identify terrorists to kill? Other machine learning models, however, are hard to predict and ever so data hungry that the priority is often on getting a lot of data regardless of relevance. In the case of calculating a dispersion matrix based on phone signals, contact frequency, geolocation, and other unannotated data, identifying hot nodes thus nominating terrorists to kill is not as simple as predicting someone's music taste. As stated in Weber's paper, it is not easy to foresee terrorist attack based on certain behavior, yet the model assumes certain metrics such as frequency of contact in a social network as a significant indicator of terrorist activity. \n There are numerous levels of abstraction in president's Terror Tuesday decision-making process: first from the unannotated mass data to the machine learning algorithms to software engineers to intelligence agency, then to final decision-making. Isn't it inevitable that a lot of false positives and false negatives will arise along this long and unclear abstraction pipeline? Aren't the consequences of these false signals a matter of life and death? But really, do they care?"
	}
}